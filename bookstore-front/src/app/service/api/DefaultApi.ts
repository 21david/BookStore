/**
 * BookStore APIs
 * BookStore APIs exposed from a Java EE back-end to an Angular front-end
 *
 * OpenAPI spec version: 1.0.0
 * Contact: antonio.goncalves@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';
import { Observable }                                        from 'rxjs';
import { map }                                               from 'rxjs/operators';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DefaultApi {
    protected basePath = 'http://localhost:8080/bookstore-back-1.0/api';
    public defaultHeaders: HttpHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected http: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * 
     */
    public ping(extraHttpRequestParams?: any): Observable<string> {
        return this.pingWithHttpInfo(extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }


    /**
     * 
     * 
     */
    public pingWithHttpInfo(extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/ping`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain'
        ];

        let options: any = {
            method: 'GET',
            headers: headers,
            params: queryParameters
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('GET', path, options);
    }

}
