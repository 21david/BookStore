/**
 * BookStore APIs
 * BookStore APIs exposed from a Java EE back-end to an Angular front-end
 *
 * OpenAPI spec version: 1.0.0
 * Contact: antonio.goncalves@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';
import { Observable }                                        from 'rxjs';
import { map }                                               from 'rxjs/operators';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class BookApi {
    protected basePath = 'http://localhost:8080/bookstore-back-1.0/api';
    public defaultHeaders: HttpHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected http: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Returns the number of books
     */
    public countBooks(extraHttpRequestParams?: any): Observable<number> {
        return this.countBooksWithHttpInfo(extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }

    /**
     * Creates a book given a JSON Book representation
     */
    public createBook(book?: models.Book, extraHttpRequestParams?: any): Observable<models.Book> {
        return this.createBookWithHttpInfo(book, extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }

    /**
     * Deletes a book given an id
     * 
     * @param id 
     */
    public deleteBook(id?: number, extraHttpRequestParams?: any): Observable<{}> {
        if (!id) return new Observable<{}>();
        return this.deleteBookWithHttpInfo(id, extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }

    /**
     * Returns a book given an identifier
     * 
     * @param id 
     */
    public getBook(id: number, extraHttpRequestParams?: any): Observable<models.Book> {
        return this.getBookWithHttpInfo(id, extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }

    /**
     * Returns all the books
     * 
     */
    public getBooks(extraHttpRequestParams?: any): Observable<Array<models.Book>> {
        return this.getBooksWithHttpInfo(extraHttpRequestParams)
            .pipe(
                map((response: any) => {
                    if (response.status === 204) {
                        return undefined;
                    } else {
                        return response;
                    }
                })
            );
    }


    /**
     * Returns the number of books
     * 
     */
    public countBooksWithHttpInfo(extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/books/count`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain'
        ];

        let options: any = {
            method: 'GET',
            headers: headers,
            params: queryParameters
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('GET', path, options);
    }

    /**
     * Creates a book given a JSON Book representation
     * 
     */
    public createBookWithHttpInfo(book?: models.Book, extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/books`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let options: any = {
            method: 'POST',
            headers: headers,
            params: queryParameters,
            body: book
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('POST', path, options);
    }

    /**
     * Deletes a book given an id
     * 
     * @param id 
     */
    public deleteBookWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/books/${id}`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBook.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let options: any = {
            method: 'DELETE',
            headers: headers,
            params: queryParameters
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('DELETE', path, options);
    }

    /**
     * Returns a book given an identifier
     * 
     * @param id 
     */
    public getBookWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/books/${id}`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBook.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let options: any = {
            method: 'GET',
            headers: headers,
            params: queryParameters
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('GET', path, options);
    }

    /**
     * Returns all the books
     * 
     */
    public getBooksWithHttpInfo(extraHttpRequestParams?: any): Observable<any> {
        const path = this.basePath + `/books`;

        let queryParameters = new HttpParams();
        let headers = this.defaultHeaders;
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let options: any = {
            method: 'GET',
            headers: headers,
            params: queryParameters
        };

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            options = (<any>Object).assign(options, extraHttpRequestParams);
        }

        return this.http.request('GET', path, options);
    }

}
